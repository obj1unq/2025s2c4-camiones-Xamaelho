import camion.*
import cosas.*

describe "Camion carga bumblebee y knightRider" {
    test "Camion esta descargado" {
        // se podria hacer un metodo estaVacio() en camion, en este caso no se pidio
        assert.equals(false, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion vacio se le carga Bumblebee y no tiene otra cosa" {
        camion.cargar(bumblebee)
        assert.equals(true, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion vacio se le carga Bumblebee y Knight Rider" {
        camion.cargar(bumblebee)
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(bumblebee))
        assert.equals(true, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion cargado con Bumblebee y Knight Rider se le descarga Bumblebee y solo queda Knight Rider" {
        camion.cargar(bumblebee)
        camion.cargar(knightRider)
        camion.descargar(bumblebee)
        assert.equals(true, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "En un camion que carga Knight Rider, se le intenta cargar Knight Rider nuevamente y da error" {
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(knightRider))
        assert.throwsExceptionWithMessage("La cosa ya está en el camion, no se puede volver a agregar!", { camion.cargar(knightRider) })
    }
    test "En un camion que carga Knight Rider, se intenta descargar Bumblebee y da error" {
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(knightRider))
        assert.throwsExceptionWithMessage("La cosa no está en el camion", { camion.descargar(bumblebee) })
    }

}

describe "Inicial: Saber si el peso de cada uno de los objetos es un número par." {
    test "Knight Rider tiene un peso de numero par" {
        assert.equals(true, knightRider.tienePesoPar())
    }
    test "La arena a granel tiene un peso de numero par" {
        assert.equals(true, arenaAGranel.tienePesoPar())
    }
    test "Bumblebee tiene un peso de numero par" {
        assert.equals(true, bumblebee.tienePesoPar())
    }
    test "El paquete de ladrillos tiene un peso de numero par" {
        assert.equals(true, paqueteDeLadrillos.tienePesoPar())
    }
    test "La bateria antiaerea tiene un peso de numero par" {
        assert.equals(true, bateriaAntiaerea.tienePesoPar())
    }
    test "Los residuos radiactivos tiene un peso de numero par" {
        assert.equals(true, residuosRadiactivos.tienePesoPar())
    }
}

describe "Saber si el peso de cada uno de los objetos cargados en un camion es un número par" {
    test "Para un camión cargado con Bumblebee y 50 kg de arena a granel todo peso es par" {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
        assert.equals(true, camion.todosLosPesosSonPares())
    }
    test "Para un camión cargado con Bumblebee y 50 kg de arena a granel todo peso NO es par" {
        
        camion.cargar(bumblebee)
        arenaAGranel.peso(51)
        camion.cargar(arenaAGranel)
        assert.equals(false, camion.todosLosPesosSonPares())
    }
}

describe "Un camion cargado contesta si tiene la cantidad solicitada" {
    method initialize() {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
    }
    test "Se pregunta si hay algo que pesa 50 y responde que true (la arena)" {
        assert.equals(true, camion.hayAlgunoQuePesa(50))
    }
    test "Se pregunta si hay algo que pesa 800 y responde que true (Bumblebee)" {
        assert.equals(true, camion.hayAlgunoQuePesa(800))
    }
    test "Se pregunta si hay algo que pesa 500 y responde false" {
        assert.equals(false, camion.hayAlgunoQuePesa(500))
    }
}

describe "el camion esta excedido o no lo esta" {
    method initialize() {
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantLadrillos(300)
        camion.cargar(paqueteDeLadrillos)
    }
    test "El camión tiene a Bumblebee y un paquete de 300 ladrillos: no está excedido de peso" {
        assert.equals(false, camion.estaExcedido())
    }
    test "El camion carga 400 ladrillos y está excedido" {
        assert.equals(true, camion.estaExcedido())
    }
}

describe "Encontrar una cosa cargada cuyo nivel de peligrosidad coincida exactamente con el valor indicado" {
    method initialize() {
        bumblebee.transformacion(transformacionAuto)
        camion.cargar(bumblebee)
        bateriaAntiaerea.tieneMisiles(false)
        camion.cargar(bateriaAntiaerea)
        camion.cargar(residuosRadiactivos)
    }
    test "Se pide algo de nivel 0 debe encontrar a la batería antiaérea" {
        assert.equals(bateriaAntiaerea, camion.encontrarCosaConPeligrosidad(0))
    }
    test "Se pide algo de nivel 15 debe encontrar a Bumblebee" {
        assert.equals(bumblebee, camion.encontrarCosaConPeligrosidad(15))
    }
    test "Se pide algo de nivel 200 debe encontrar residuos" {
        assert.equals(residuosRadiactivos, camion.encontrarCosaConPeligrosidad(200))
    }
    test "Se pide algo de nivel 30 romper por no encontrar nada" {
        assert.throwsExceptionWithMessage("No se encuentra cosa de ese nivel de peligrosidad", { camion.encontrarCosaConPeligrosidad(30) })
    }
    test "se cambia a Bumblebee a modo robot, se pide algo de 30 y encuentra a Bumblebee" {
        bumblebee.transformacion(transformacionRobot)
        assert.equals(bumblebee, camion.encontrarCosaConPeligrosidad(30))
    }
    test "se carga la batería con misiles, se pide algo de peligrosidad 100 y encuentra a la batería" {
        bateriaAntiaerea.tieneMisiles(true)
        assert.equals(bateriaAntiaerea, camion.encontrarCosaConPeligrosidad(100))
    }
}

describe "Encontrar cosas segun nivel de peligrosidad" {
    method initialize() {
        camion.cargar(knightRider)
        bateriaAntiaerea.tieneMisiles(true)
        camion.cargar(bateriaAntiaerea)
    }
    test "Se buscan cosas más peligrosas de 15 sólo está la batería antiaérea" {
        assert.equals(#{bateriaAntiaerea}, camion.cosasQueSuperanPeligrosidad(15))
    }
    test "Se buscan cosas más peligrosas que Bumblebee sólo está la batería antiaérea" {
        assert.equals(#{bateriaAntiaerea}, camion.cosasQueSeanMasPeligrosasQue(bumblebee))
    }
    test "Se buscan cosas que superan 2 de peligrosidad y devuelve Knight Rider y la batería antiaérea" {
        assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasQueSuperanPeligrosidad(2))
    }
    test "Se buscan cosas más peligrosas que el paquete de ladrillos y devuelve Knight Rider y la batería antiaérea" {
        assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasQueSeanMasPeligrosasQue(paqueteDeLadrillos))
    }
    test "No hay cosas más peligrosas que 200" {
        assert.equals(#{}, camion.cosasQueSuperanPeligrosidad(200))
    }
    test "No hay nada más peligroso que los residuos radiactivos" {
        assert.equals(#{}, camion.cosasQueSeanMasPeligrosasQue(residuosRadiactivos))
    }
}

describe "Consultas sobre si puede circular" {
    test "el camión tiene a Bumblebee en auto y un paquete de 300 ladrillos, puede circular en una ruta con nivel 20" {
        bumblebee.transformacion(transformacionAuto)
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantLadrillos(300)
        camion.cargar(paqueteDeLadrillos)
        assert.equals(true, camion.puedeCircularEnRutaDePeligrosidadHasta(20))
    }
    test "el camión tiene a Bumblebee en auto y un paquete de 400 ladrillos, no puede circular en una ruta con nivel 20 por estar excedido" {
        bumblebee.transformacion(transformacionAuto)
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantLadrillos(400)
        camion.cargar(paqueteDeLadrillos)
        assert.equals(false, camion.puedeCircularEnRutaDePeligrosidadHasta(20))
    }
    test "el camión tiene a Bumblebee en robot y un paquete de 400 ladrillos, no puede circular en una ruta con nivel 20 por la peligrosidad" {
        bumblebee.transformacion(transformacionRobot)
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantLadrillos(400)
        camion.cargar(paqueteDeLadrillos)
        assert.equals(false, camion.puedeCircularEnRutaDePeligrosidadHasta(20))
    }
}

// Desde contenedor hasta:

test "Un camión cargado con Bumblebee y un paquete de 300 ladrillos, devuelve los pesos 800 y 600" {
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantLadrillos(300)
        camion.cargar(paqueteDeLadrillos)
        assert.equals(#{600,800}, camion.pesosDeTodasLasCosas() )
}

// Desde totalBultos