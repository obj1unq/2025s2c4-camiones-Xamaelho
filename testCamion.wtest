import camion.*
import cosas.*

describe "Camion carga bumblebee y knightRider" {
    test "Camion esta descargado" {
        // se podria hacer un metodo estaVacio() en camion, en este caso no se pidio
        assert.equals(false, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion vacio se le carga Bumblebee y no tiene otra cosa" {
        camion.cargar(bumblebee)
        assert.equals(true, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion vacio se le carga Bumblebee y Knight Rider" {
        camion.cargar(bumblebee)
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(bumblebee))
        assert.equals(true, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "A camion cargado con Bumblebee y Knight Rider se le descarga Bumblebee y solo queda Knight Rider" {
        camion.cargar(bumblebee)
        camion.cargar(knightRider)
        camion.descargar(bumblebee)
        assert.equals(true, camion.contieneA(knightRider))
        assert.equals(false, camion.contieneA(bumblebee))
        assert.equals(false, camion.contieneA(arenaAGranel))
        assert.equals(false, camion.contieneA(paqueteDeLadrillos))
        assert.equals(false, camion.contieneA(bateriaAntiaerea))
        assert.equals(false, camion.contieneA(residuosRadiactivos))
    }
    test "En un camion que carga Knight Rider, se le intenta cargar Knight Rider nuevamente y da error" {
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(knightRider))
        assert.throwsExceptionWithMessage("La cosa ya está en el camion, no se puede volver a agregar!", { camion.cargar(knightRider) })
    }
    test "En un camion que carga Knight Rider, se intenta descargar Bumblebee y da error" {
        camion.cargar(knightRider)
        assert.equals(true, camion.contieneA(knightRider))
        assert.throwsExceptionWithMessage("La cosa no está en el camion", { camion.descargar(bumblebee) })
    }

}

describe "Inicial: Saber si el peso de cada uno de los objetos es un número par." {
    test "Knight Rider tiene un peso de numero par" {
        assert.equals(true, knightRider.tienePesoPar())
    }
    test "La arena a granel tiene un peso de numero par" {
        assert.equals(true, arenaAGranel.tienePesoPar())
    }
    test "Bumblebee tiene un peso de numero par" {
        assert.equals(true, bumblebee.tienePesoPar())
    }
    test "El paquete de ladrillos tiene un peso de numero par" {
        assert.equals(true, paqueteDeLadrillos.tienePesoPar())
    }
    test "La bateria antiaerea tiene un peso de numero par" {
        assert.equals(true, bateriaAntiaerea.tienePesoPar())
    }
    test "Los residuos radiactivos tiene un peso de numero par" {
        assert.equals(true, residuosRadiactivos.tienePesoPar())
    }
}

describe "Saber si el peso de cada uno de los objetos cargados en un camion es un número par" {
    test "Para un camión cargado con Bumblebee y 50 kg de arena a granel todo peso es par" {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
        assert.equals(true, camion.todosLosPesosSonPares())
    }
    test "Para un camión cargado con Bumblebee y 50 kg de arena a granel todo peso NO es par" {
        camion.cargar(bumblebee)
        arenaAGranel.peso(51)
        camion.cargar(arenaAGranel)
        assert.equals(false, camion.todosLosPesosSonPares())
    }
}

describe "Un camion cargado contesta si tiene la cantidad solicitada" {
    method initialize() {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
    }
    test "Se pregunta si hay algo que pesa 50 y responde que true (la arena)" {
        assert.equals(true, camion.hayAlgunoQuePesa(50))
    }
    test "Se pregunta si hay algo que pesa 800 y responde que true (Bumblebee)" {
        assert.equals(true, camion.hayAlgunoQuePesa(800))
    }
    test "Se pregunta si hay algo que pesa 500 y responde false" {
        assert.equals(false, camion.hayAlgunoQuePesa(500))
    }
}